using System.Collections.Generic;
using System.Drawing;

namespace Dungeon
{
	public class BfsTask
	{
		public static IEnumerable<SinglyLinkedList<Point>> FindPaths(Map map, Point start, Point[] chests)
		{
			var unvisited = new Queue<Point>();
			var visited = new HashSet<Point>() { start };
			var trajectory = new Dictionary<Point, SinglyLinkedList<Point>>
			{
				{ start, new SinglyLinkedList<Point>(start) },
			};
			unvisited.Enqueue(start);
			while (unvisited.Count > 0)
			{
				var position = unvisited.Dequeue();
				foreach (var motion in Walker.PossibleDirections)
				{
					var probablePosition = position + motion;
					if (!СheckBorders(map, probablePosition, visited))
						continue;
					unvisited.Enqueue(probablePosition);
					visited.Add(probablePosition);
					trajectory[probablePosition] = new SinglyLinkedList<Point>(probablePosition, trajectory[position]);
				}
			}
			return GetChestWay(chests, trajectory);
		}

		public static bool СheckBorders(Map map, Point probablePosition, HashSet<Point> visited)
		{
			return !map.InBounds(probablePosition) 
				|| visited.Contains(probablePosition)	
				|| map.Dungeon[probablePosition.X, probablePosition.Y] != MapCell.Empty 
				? false 
				: true;
		}

		public static IEnumerable<SinglyLinkedList<Point>> GetChestWay(Point[] chests,
																		Dictionary<Point, SinglyLinkedList<Point>> trajectoryMovement)
        {
			foreach (var сhestWay in chests)
			{
				if (trajectoryMovement.ContainsKey(сhestWay))
					yield return trajectoryMovement[сhestWay];
			}
		}
	}
}